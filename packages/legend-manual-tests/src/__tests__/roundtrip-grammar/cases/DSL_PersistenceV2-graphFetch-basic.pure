###Pure
Class test::Person
{
  name: String[1];
  isDeleted: String[1];
}

Class test::model::Firm
{
  employees: test::Person[1..*];
  legalName: String[1];
}

Class test::ServiceResult
{
  ID: String[1];
  AMOUNT: Integer[1];
  SOURCE_FROM: String[1];
  DELETED: String[1];
}


###Relational
Database test::TestDatabase
(
  Table personTable
  (
    ID INTEGER PRIMARY KEY,
    AMOUNT INTEGER,
    FROM_Z TIMESTAMP PRIMARY KEY,
    THRU_Z TIMESTAMP,
    BATCH_IN INTEGER PRIMARY KEY,
    BATCH_OUT INTEGER
  )
)


###Mapping
Mapping test::Mapping
(
)


###Service
Service test::Service
{
  pattern: 'test';
  documentation: 'test';
  autoActivateUpdates: true;
  execution: Single
  {
    query: src: test::Person[1]|$src.name;
    mapping: test::Mapping;
    runtime:
    #{
      mappings:
      [
        test::Mapping
      ];
    }#;
  }
  testSuites:
  [

  ]
}


###Persistence
Persistence test::TestPersistence
{
  doc: 'This is test documentation.';
  trigger: Manual;
  service: test::Service;
  serviceOutputTargets:
  [
    #/test::model::Firm/employees#
    {
      keys:
      [
        #/test::model::Firm/employees/name#
      ]
      datasetType: Delta
      {
        actionIndicator: DeleteIndicator
        {
          deleteField: #/test::model::Firm/employees/isDeleted#;
          deleteValues: ['Yes', 'true', '1'];
        }
      }
      deduplication: None;
    }
    ->
    Relational
    #{
      table: personTable;
      database: test::TestDatabase;
      temporality: Bitemporal
      {
        processingDimension: BatchId
        {
          batchIdIn: BATCH_IN;
          batchIdOut: BATCH_OUT;
        }
        sourceDerivedDimension: DateTime
        {
          dateTimeStart: FROM_Z;
          dateTimeEnd: THRU_Z;
          sourceFields: Start
          {
            startField: SOURCE_FROM;
          }
        }
      }
    }#
  ];
  notifier:
  {
    notifyees:
    [
      PagerDuty
      {
        url: 'http://xyz.com';
      },
      Email
      {
        address: 'http://xyz.com';
      }
    ];
  }
  tests:
  [
    test1:
    {
      testBatches:
      [
        testBatch1:
        {
          data:
          {
            connection:
            {
              ExternalFormat
              #{
                contentType: 'application/json';
                data: '[{"ID":1, "AMOUNT":100, "SOURCE_FROM": "2022-01-01 00:00:00.0","DELETED": "N"},{"ID":2, "AMOUNT":200, "SOURCE_FROM": "2022-01-01 00:00:00.0","DELETED": "N"},{"ID":3, "AMOUNT":400, "SOURCE_FROM": "2022-01-01 00:00:00.0","DELETED": "N"}]';
              }#
            }
          }
          asserts:
          [
            assert1:
              EqualToJson
              #{
                expected:
                  ExternalFormat
                  #{
                    contentType: 'application/json';
                    data: '[{"ID":1,"AMOUNT":100,"BATCH_IN":1,"THRU_Z":"9999-12-31 23:59:59.0","BATCH_OUT":999999999,"FROM_Z":"2022-01-01 00:00:00.0"},{"ID":2,"AMOUNT":200,"BATCH_IN":1,"THRU_Z":"9999-12-31 23:59:59.0","BATCH_OUT":999999999,"FROM_Z":"2022-01-01 00:00:00.0"},{"ID":3,"AMOUNT":400,"BATCH_IN":1,"THRU_Z":"9999-12-31 23:59:59.0","BATCH_OUT":999999999,"FROM_Z":"2022-01-01 00:00:00.0"}]';
                  }#;
              }#
          ]
        }
      ]
      isTestDataFromServiceOutput: true;
      graphFetchPath: #/test::model::Firm/employees#;
    }
  ]
}
